library(devtools)
find.package(devtools)
find.package("devtools")
find.package()
find.package("devtools")
find.package("devtools")
Sys.getenv("PATH")
system('g++ -v')
system('where make')
find.package("devtools")
available.packages()
available.packages() head(rownames(a), 3)
available.packages()
head(rownames(a), 3)
available.packages()
head(rownames(a), 3)
install.packages("slidify")
install.packages("ggplot2")
install.packages("devtools")
library("ggplot2")
library(gglot2)
detach("package:ggplot2", unload=TRUE)
library(ggplot2)
detach("package:ggplot2", unload=TRUE)
library(ggplot2)
search()
find.package("devtools")
detach("package:ggplot2", unload=TRUE)
library("ggplot2", lib.loc="~/R/win-library/3.1")
detach("package:ggplot2", unload=TRUE)
library(devtools)
find_rtools()
pkgs <- c("slidify", "slidifyLibraries", "rCharts")
install_github(pkgs, 'ramnathv', ref = 'dev')
find.packages("slidify")
find.packages("devtools")
detach("package:devtools", unload=TRUE)
find.packages("devtools")
library(devtools)
detach("package:devtools", unload=TRUE)
exit
find.packages()
q()
install.packages("slidify")
available.packages()
search()
find.package("devtools")
q
q()
x<-10
x
x<1,2,3
x<"y"
x<10
x<-100
x
x<--100
x
x<-"y"
x
a<-x
a
a<-x*2
a<-10
a
g<-5
g
a+g
a*g
a/g
sqrt(a)
x^2
x^g
sin(x)
sin(a)
factrial(a)
factorial(a)
clear
clr
divider<-function(x,y){result<-x/y print(result)}
divider(50,5)
q()
add2<-function(x,y) {
x+y
}
add2(3,5)
add2<-function(x,y) {
x+y
}
add2(10,3)
source('~/.active-rstudio-document')
above<-function(x,n) {
use<-x>n
x[use]
}
vect<-1:20
above(vect,10)
above(1:100,13)
above<-function(x,n=10) {
use<-x>n
x[use]
}
above(1:100)
above(1:100,50)
columnmean <- function(y) {
nc<-ncol(y)
means<-numeric(nc)
for (i in 1:nc) {
means[i]<-mean(y[,i])
}
means
}
columnmean(airquality)
columnmean <- function(y,removeNA=TRUE) {
nc<-ncol(y)
means<-numeric(nc)
for (i in 1:nc) {
means[i]<-mean(y[,i],rm.na=removeNA)
}
means
}
columnmean(airquality)
columnmean <- function(y,removeNA=TRUE) {
nc<-ncol(y)
means<-numeric(nc)
for (i in 1:nc) {
means[i]<-mean(y[,i],na.rm=removeNA)
}
means
}
columnmean(airquality)
columnmean(airquality,FALSE)
columnmean(airquality)
exit
q()
f<-function(x) {
g<-function(y) {
y+z
}
z<-4
x+g(x)
}
z<-10
f(3)
q()
source('~/.active-rstudio-document')
make.power<-function(n) {
pow<-function(x) {
x^n
}
pow
}
cube<-make.power(3)
cube(3)
square<-make.power(2)
square(3)
ls(environment(cube))
get("n",environment(cube))
get("pow",environment(cube))
library(datasets)
data(iris)
?iris
head(iris)
iris
x<-iris$Species==virginica
y<-iris[x,1]
mean(y)
iris
iris$Species
iris$Species==virginica
x<-iris$Species=="virginica"
y<-iris[x,1]
mean(y)
y
colmeans(iris)
colMeans(iris)
?tapply
tapply(iris$Sepal.Length,iris$Species,mean)
apply(iris[, 1:4], 2, mean)
rowMeans(iris[, 1:4])
apply(iris, 1, mean)
data(mtcars)
head(mtcars)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
sapply(split(mtcars$hp,mtcars$cyl),mean)
x<-sapply(split(mtcars$hp,mtcars$cyl),mean)
x
class(x)
x[3]
x[3]-x[1]
debug(ls)
ls()
q
q()
q
exit
C
Q
ls
?ls
Q
ls
iris
mtcars
head(mtcars)
tapply(mtcars$hp,mtcars$cyl,mean)
x<-tapply(mtcars$hp,mtcars$cyl,mean)
Q
Q
source('~/.active-rstudio-document')
makeVector<-function(x=numeric()) {
m<-NULL
set<-function(y) {
x<<-y
m<<-NULL
}
get<-function() x
setmean<-function(mean) m<<mean
getmean<-function() m
list(set=set,get=get,setmean=setmean,getmean=getmean)
}
source('~/.active-rstudio-document')
makeVector <- function(x=numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m << mean
getmean <- function() m
list(set=set,get=get,setmean=setmean,getmean=getmean)
}
x<-numeric()
class(x)
str(x)
source('~/.active-rstudio-document')
crazy <- function() {
x <- 42
x <<- 3.14
print(x)
}
x<-0
x
crazy()
x
source('~/.active-rstudio-document')
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
makeVector(c(1,2,3,4))
a<-makeVector(c(1,2,3,4))
a
a$get()
a$getmean()
a$setmean()
a$setmean(8)
a$getmean()
cachemean(C(1,2,3,4))
cachemean(a)
a$get
a$get()
a$getmean()
a$setmean(NULL)
a$getmean()
cachemean(a)
a$getmean()
cachemean(a)
a$set(c(10,20,30,40))
a$getmean()
cachemean(a)
a$getmean()
cachemean(a)
?solve
x<-matrix(c(1,2,3,4),nrow=2,ncol=2)
x
solve(x)
x*solve(x)
x<-matrix(c(4,3,3,2),nrow=2,ncol=2)
x
solve(x)
x<-matrix()
x
x<-matrix(NULL)
?NULL
source('~/.active-rstudio-document')
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
##list(set = set, get = get,
##setmean = setmean,
##getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
a<makeVector(c(1,2,3,4))
source('~/Sarah/data science/ProgrammingAssignment2/cachematrix.R')
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinverse <- function(inverse) inv <<- inverse
getinverse <- function() inv
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## This function computes the inverse of the special "matrix" returned by makeCacheMatrix above.
## If the inverse has already been calculated (and the matrix has not changed),
## then cacheSolve should retrieve the inverse from the cache.
cacheSolve <- function(x, ...) {
inv <- x$getinverse()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...) ## Return a matrix that is the inverse of 'x'
x$setinverse(inv)
inv
}
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()
cacheSolve(amatrix)
amatrix$set(matrix(c(0,5,99,66), nrow=2, ncol=2))
amatrix$getinverse
cacheSolve(amatrix)
amatrix$get()
amatrix$getinverse()
amatrix<-makeCacheMatrix(c(1,2,3,4),2,2)
amatrix<-makeCacheMatrix(c(1,2,3,4),nrow=2,ncol=2)
amatrix<-makeCacheMatrix(Matrix(c(1,2,3,4),nrow=2,ncol=2))
class(amatrix)
amatrix
amatrix$get()
amatrix
amatrix$get()
amatrix<-makeCacheMatrix(Matrix(c(1,2,3,4),nrow=2,ncol=2))
amatrix$get()
source('~/Sarah/data science/ProgrammingAssignment2/cachematrix.R')
amatrix<-makeCacheMatrix(Matrix(c(1,2,3,4),nrow=2,ncol=2))
amatrix$get()
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinverse <- function(inverse) inv <<- inverse
getinverse <- function() inv
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## This function computes the inverse of the special "matrix" returned by makeCacheMatrix above.
## If the inverse has already been calculated (and the matrix has not changed),
## then cacheSolve should retrieve the inverse from the cache.
cacheSolve <- function(x, ...) {
inv <- x$getinverse()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...) ## Return a matrix that is the inverse of 'x'
x$setinverse(inv)
inv
}
amatrix<-makeCacheMatrix(Matrix(c(1,2,3,4),nrow=2,ncol=2))
amatrix$get()
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()
amatrix$get()
class(amatrix)
amatrix
amatrix$getinverse()
cacheSolve(amatrix)
inv
amatrix$getinverse
amatrix$getinverse()
amatrix$set(matrix(c(0,5,99,66), nrow=2, ncol=2))
cacheSolve(amatrix)
amatrix$get()
amatrix$getinverse()
q()
source('~/Sarah/DataScience/ProgrammingAssignment2/cachematrix.R')
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL ## Define cache inv
set <- function(y) {
x <<- y
inv <<- NULL ## Use superassignment <<- to update the cache in the containing environment
}
get <- function() x
setinverse <- function(inverse) inv <<- inverse ## Use superassignment <<- to update the cache
getinverse <- function() inv
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## This function computes the inverse of the special "matrix" returned by makeCacheMatrix above.
## If the inverse has already been calculated (and the matrix has not changed),
## then cacheSolve should retrieve the inverse from the cache.
cacheSolve <- function(x, ...) {
inv <- x$getinverse()
if(!is.null(inv)) {
message("getting cached data")
return(inv) ## retrive inverse matrix if it has already been calculated
}
data <- x$get()
inv <- solve(data, ...) ## Return a matrix that is the inverse of 'x'
x$setinverse(inv) ## The new inverse matrix is stored in cache after calling the function setinverse
inv
}
amatrix=makeCacheMatrix(matrix(c(1,2,3,4),nrow=2,ncol=2))
amatrix$get()
cacheSolve(amatrix)
q()
set.seed(1)
?set.seed
rpois(5, 2)
rpois(5, 2)
rpois(5, 2)
?qpois
?ppois
q()
?ginv
source('~/.active-rstudio-document')
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()
cacheSolve(amatrix)
amatrix$getinverse()
cacheSolve(amatrix)
amatrix$set(matrix(c(0,5,99,66), nrow=2, ncol=2))
amatrix$set(matrix(c(0,5,99,66), nrow=2, ncol=2))
amatrix$get()
source('~/.active-rstudio-document')
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
>    amatrix$get()         # Returns original matrix
amatrix$get()
cacheSolve(amatrix)
amatrix$getinverse()
cacheSolve(amatrix)
amatrix$set(matrix(c(0,5,99,66), nrow=2, ncol=2))
amatrix$setinverse()
amatrix$getinverse()
q()
library(xlsx)
cameraData <- read.xlsx("./data/cameras.xlsx",sheetIndex=1,header=TRUE)
?read.xlsx
quit()
library(xlsx)
library("xlsx", lib.loc="~/R/win-library/3.1")
library("xlsxjars", lib.loc="~/R/win-library/3.1")
library("rJava", lib.loc="~/R/win-library/3.1")
cameraData <- read.xlsx("./data/cameras.xlsx",sheetIndex=1,header=TRUE)
?read.xlsx
cameraData <- read.xlsx("./data/cameras.xlsx", 1)
quit()
install.packages('RMySQL',type='source')
find.package("RMySQL")
install.packages('RMySQL',type='source')
Sys.getenv('MYSQL_HOME')
?Sys.setenv
install.packages('RMySQL',type='source')
Sys.getenv('MYSQL_HOME')
Sys.getenv('MYSQL_HOME')
quit()
q()
setwd("~/Sarah/DataScience_Courses_JHU/GettingAndCleaningData/Project")
knit("CodeBook.Rmd", output = "CodeBook.md", encoding = "ISO8859-1", quiet = TRUE)
library("knitr", lib.loc="~/R/win-library/3.1")
knit("CodeBook.Rmd", output = "CodeBook.md", encoding = "ISO8859-1", quiet = TRUE)
